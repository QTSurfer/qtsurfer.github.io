openapi: 3.1.0
info:
  title: QTSurfer API
  summary: QTSurfer backend services API
  version: 0.10.18
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: Find out more about QTSurfer API
  url: https://qtsurfer.com/developers

servers:
  - url: https://api.staging.qtsurfer.com
    description: Staging server
  - url: https://api.qtsurfer.com
    description: Production server

tags:
  - name: Exchange
    description: |-   
      This set of endpoints allows interaction with various **exchanges** for cryptocurrencies and financial assets. With these endpoints, users can access information about available exchanges, 
      retrieve the instruments (currency pairs or assets) offered by each exchange, and perform analyses on them. The data provided by these endpoints is crucial for strategic decision-making 
      within the trading platform.

      **Key functionalities**:
      - Retrieve the list of available exchanges on the platform.
      - Get the instruments available on a specific exchange (currency pairs, assets, etc.).

  - name: Backtesting
    description: |-
      The **backtesting** endpoints enable users to test trading strategies based on historical data before applying them in real-time trading. This functionality is essential for traders who want
      to evaluate the performance of a strategy under past market conditions and optimize it before implementing it in a live trading environment.

      **Key functionalities**:
      - Compile rich Java&trade; based strategies.
      - Run simulations of trading strategies using historical market data.
      - Assess performance and optimize strategies based on past results and metrics.

security:
  - bearerAuth: []

paths:
  /exchanges:
    get:
      tags:
        - Exchange
      summary: Get a list of available exchanges
      operationId: getExchanges
      security:
        - bearerAuth: []
      responses:
        200:
          description: A JSON array of Exchanges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exchange"
              example:
                - id: binance
                  name: Binance
                - id: kraken
                  name: Kraken
  /exchange/{exchangeId}/instruments:
    get:
      tags:
        - Exchange
      summary: Get a list of Instruments from a specific exchange
      operationId: getInstruments
      security:
        - bearerAuth: []
      parameters:
        - name: exchangeId
          in: path
          required: true
          description: ID of the exchange to retrieve instruments for
          schema:
            type: string
      responses:
        200:
          description: A JSON array of Instruments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instrument"
              example: 
                - BTC/USDT
                - BTC/ETH
        404:
          description: Exchange not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Instrument:
      type: string
      description: Exchange instrument (eg. a currency pair)
      example: BTC/USDT
    Exchange:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the exchange
          example: binance
        name:
          type: string
          description: Name of the exchange
          example: Binance

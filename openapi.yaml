openapi: 3.1.0
info:
  title: QTSurfer API
  summary: QTSurfer backend services API
  version: 0.13.04
  contact:
    name: QTSurfer Support
    email: support@qtsurfer.com
    url: 'https://qtsurfer.com/support'
  termsOfService: 'https://qtsurfer.com/terms'
  license:
    name: Apache-2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://api.staging.qtsurfer.com'
    description: Staging server
  - url: 'https://api.qtsurfer.com'
    description: Production server
paths:
  '/exchanges':
    get:
      operationId: getExchanges
      summary: Get a list of available exchanges
      responses:
        '200':
          description: A JSON array of Exchanges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exchange'
              example:
                - id: binance
                  name: Binance
                - id: kraken
                  name: Kraken
      security:
        - bearerAuth: []
      tags:
        - Exchange
  '/exchange/{exchangeId}/instruments':
    get:
      operationId: getInstruments
      summary: Get a list of Instruments from a specific exchange
      parameters:
        - name: exchangeId
          in: path
          description: ID of the exchange to retrieve instruments for
          required: true
          schema:
            type: string
            example: binance
      responses:
        '200':
          description: A JSON array of Instruments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instrument'
              example:
                - BTC/USDT
                - BTC/ETH
        '404':
          description: Exchange not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - bearerAuth: []
      tags:
        - Exchange
  '/backtest/{exchangeId}/{type}/prepare':
    post:
      operationId: prepareBacktesting
      summary: Prepare backtesting data for an exchange
      description: |
        This endpoint prepares backtesting data (e.g., tickers) for an exchange.
        The user must provide a date range and a list of instruments to prepare for execution of backtests.
      parameters:
        - name: exchangeId
          in: path
          description: ID of the exchange to prepare the backtesting for
          required: true
          schema:
            type: string
            example: binance
        - name: type
          in: path
          description: The type of data source to prepare from
          required: true
          schema:
            $ref: '#/components/schemas/DataSourceType'
      requestBody:
        description: The required data to prepare a backtesting
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  description: |
                    Start date for the preparation process. Supports the following formats:
                    - ISO-8601 (e.g. 2024-12-14T23:59:59Z)
                    - ISO DATE (e.g. 2024-12-14)
                    - BASIC ISO DATE (e.g., 20241214)
                  example: "2024-12-13T00:00:00Z"
                to:
                  type: string
                  description: |
                    End date for the preparation process. Supports the following formats:
                    - ISO-8601 (e.g. 2024-12-14T23:59:59Z)
                    - ISO DATE (e.g. 2024-12-14)
                    - BASIC ISO DATE (e.g., 20241214)
                  example: "2024-12-14"
                instruments:
                  type: array
                  items:
                    $ref: '#/components/schemas/Instrument'
                  description: List of instruments (e.g., currency pairs) to include in the preparation
                  example:
                    - BTC/USDT
      responses:
        '200':
          description: Backtesting preparation started
          content:
            application/json:
              schema:
                type: object
                required:
                  - batchId
                  - jobs
                properties:
                  batchId:
                    type: string
                    description: Unique identifier for the batch preparation process
                    example: 13RBLGQlPnfDjO6wyKSX8i
                  jobs:
                    type: object
                    additionalProperties:
                      type: string
                    description: A mapping of instruments to their respective job preparation IDs
                    example:
                      BTC/USDT: 2o8heaioicr0edvx5ybcap
              example:
                batchId: "13RBLGQlPnfDjO6wyKSX8i"
                jobs:
                  BTC/USDT: "2o8heaioicr0edvx5ybcap"
        '400':
          description: Invalid request or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '404':
          description: Exchange or data source type not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - bearerAuth: []
      tags:
        - Backtesting
  '/backtest/{exchangeId}/{type}/prepare/{batchId}':
    get:
      operationId: getPreparationStatus
      summary: Get the status of a backtest preparation batch
      description: |
        This endpoint retrieves the status of a backtest preparation batch for a specific exchange and data source type using the provided batch ID.
      parameters:
        - name: exchangeId
          in: path
          description: ID of the exchange for the backtesting process
          required: true
          schema:
            type: string
            example: binance
        - name: type
          in: path
          description: The type of data source to prepare from
          required: true
          schema:
            $ref: '#/components/schemas/DataSourceType'
        - name: batchId
          in: path
          description: Unique identifier for the backtesting preparation batch
          required: true
          schema:
            type: string
            example: 13RBLGQlPnfDjO6wyKSX8i
      responses:
        '200':
          description: Backtesting preparation status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobState'
              example:
                - contextId: "jctx:ticker:4a627755-7f5a-4297-b647-8dddd8aee416:binance:1rabbrpk5r4kkegs83w6qr:btc/usdt:0bjmoxd4vahkgc0hnvdldh"
                  status: "Completed"
                  statusDetail: null
                  size: 0
                  completed: 0
                  startTime: null
                  endTime: null
        '404':
          description: Batch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '400':
          description: Invalid request or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - bearerAuth: []
      tags:
        - Backtesting
  '/strategy':
    post:
      operationId: postStrategy
      summary: Submits a strategy code to be compiled/validated
      requestBody:
        description: The strategy code to be submitted for validation
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: The raw strategy code submitted by the user
      responses:
        '200':
          description: Strategy created/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  strategyId:
                    $ref: '#/components/schemas/strategyId'
              example:
                strategyId: 6bsh31ikwkuivhtgcoa6s4
        '400':
          description: Invalid strategy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
              example:
                code: 400
                message: 'Line 1, Column 18: syntax error'
      security:
        - bearerAuth: []
      tags:
        - Strategy

components:
  schemas:
    ResponseError:
      description: General response error
      type: object
      properties:
        code:
          description: Status code
          type: integer
          example: 400
        message:
          description: Error description
          type: string
          example: Invalid request
    Instrument:
      description: Exchange instrument (e.g. a currency pair)
      type: string
      example: BTC/USDT
    Exchange:
      description: Exchange service provider
      type: object
      properties:
        id:
          description: Unique identifier for the exchange
          type: string
          example: binance
        name:
          description: Name of the exchange
          type: string
          example: Binance
    DataSourceType:
      type: string
      description: Managed exchange data sources available for backtesting
      enum:
        - ticker
        - kline
        - frate
      example: ticker
    JobState:
      type: object
      description: Information about a single job
      required:
        - contextId
        - status
        - size
        - completed
      properties:
          contextId:
            type: string
            description: Unique context ID for the job
            example: "jctx:ticker:4a627755-7f5a-4297-b647-8dddd8aee416:binance:1rabbrpk5r4kkegs83w6qr:btc/usdt:2o8heaioicr0edvx5ybcap"
          status:
            type: string
            description: Current status of the job
            enum:
              - New
              - Started
              - Completed
              - Aborted
              - Failed
            example: "Completed"
          statusDetail:
            type: string
            description: Detailed status information, if available
            nullable: true
            example: "Job completed with error code 5001"
          size:
            type: integer
            description: Total size of the data being prepared
            example: 100
          completed:
            type: integer
            description: The amount of data processed so far
            example: 50
          startTime:
            type: string
            format: date-time
            description: Timestamp for when the preparation started
            nullable: true
            example: "2025-01-04T14:00:00Z"
          endTime:
            type: string
            format: date-time
            description: Timestamp for when the preparation finished
            nullable: true
            example: "2025-01-04T14:00:20Z"
    strategyId:
      description: Unique identifier for a compiled strategy
      type: string
      example: 6bsh31ikwkuivhtgcoa6s4
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Exchange
    description: |-
      This set of endpoints allows interaction with various **exchanges** for cryptocurrencies and financial assets. With these endpoints, users can access information about available exchanges, 
      retrieve the instruments (currency pairs or assets) offered by each exchange, and perform analyses on them. The data provided by these endpoints is crucial for strategic decision-making 
      within the trading platform.

      **Key functionalities**:
      - Retrieve the list of available exchanges on the platform.
      - Get the instruments available on a specific exchange (currency pairs, assets, etc.).
  - name: Backtesting
    description: |-
      The **backtest** endpoints enable users to test trading strategies based on historical data before applying them in real-time trading. This functionality is essential for traders who want
      to evaluate the performance of a strategy under past market conditions and optimize it before implementing it in a live trading environment.

      **Key functionalities**:
      - Prepare historical market data for fast access.
      - Run simulations of trading strategies using prepared historical market data.
      - Assess performance and optimize strategies based on past results and metrics.
  - name: Strategy
    description: |-
      The **strategy** endpoints allow users to submit, compile, and validate trading strategies within the platform. This feature is crucial for traders who develop automated trading systems and
      wish to ensure their strategy is both executable and effective before deploying it in a live/backtesting environment.

      **Key functionalities**:
      - Submit rich Java&trade; based trading strategies for validation and compilation.
      - Ensure strategies meet the required syntax and operational constraints.
      - Validate strategies to identify potential issues or errors before execution.
      - Integrate strategies with specific exchanges and market instruments for tailored use.
externalDocs:
  description: Find out more about QTSurfer API
  url: 'https://qtsurfer.com/developers'
security:
  - bearerAuth: []
